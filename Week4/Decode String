#runtime 0ms (100%)
#memory 11.63 MB (65%)

class Solution(object):
    def decodeString(self, s):
        i = 0

        while i < len(s):
            curr = s[i]

            if curr.isdigit():
                currDig = ""
                while i < len(s) and s[i].isdigit():
                    currDig += s[i]
                    i += 1
                kStack.append(int(currDig))

            elif curr.isalpha():
                currS = ""
                while i < len(s) and s[i].isalpha():
                    currS += s[i]
                    i += 1
                if sStack:
                    sStack[-1] += currS
                else:
                    output += currS
            
            elif curr == '[':
                sStack.append("")
                i+=1

            elif curr == ']':
                num = kStack.pop()
                sub = sStack.pop() * num
                if not sStack:
                    output += sub
                else:
                    sStack[-1] += sub
                i += 1
        
        while sStack:
            output += sStack.pop(0)

        return output

#alternative solution using only one stack:
#runtime 1ms (18%)
#memory 11.78 MB (30%)
class Solution(object):
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []

        for i in range(len(s)):
            if s[i] != ']':
                stack.append(s[i])
            else:
                sub = ""
                while stack[-1] != '[':
                    sub = stack.pop() + sub
                stack.pop() #remove closing brace
                num = ""
                while stack and stack[-1].isdigit():
                    num = stack.pop() + num
                sub = int(num)*sub
                stack.append(sub)
        output = ""
        while stack:
            output = stack.pop() + output
        
        return output
